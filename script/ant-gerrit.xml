<?xml version="1.0" encoding="UTF-8" ?>
<project name="build.gerrit" default="build.all" >

<!-- ===================================================================== 
     - Global properties.  See the build.properties for information on 
     ===================================================================== -->
	<property name="gerrit.change.number" value="${GERRIT_CHANGE_NUMBER}"/>
    <property name="gerrit.host" value="${GERRIT_HOST}"/>
    <property name="gerrit.port" value="${GERRIT_PORT}"/>	
	<property name="gerrit.project.name" value="${GERRIT_PROJECT_NAME}"/>
	<property name="gerrit.user.name" value="${GERRIT_USER_NAME}"/>
	<property name="gerrit.keyfile.path" value="${GERRIT_KEYFILE_PATH}"/>
	<property name="gerrit.verified.value" value="${GERRIT_VERIFIED_VALUE}"/>
	<property name="jenkin.job.url" value="${JENKINS_JOB_URL}"/>  
	

<!-- ===================================================================== 
     - define script for build dependency.
     ===================================================================== -->
  <script language="javascript">
	var str = project.getProperty('GERRIT_PULL_URL');
	if( str != null){
		var strArray = str.split('@');	
		var username = strArray[0].split('//')[1];		
		var hostArray = strArray[1].split('/')[0].split(':');		
		var projectname = strArray[1].split(hostArray[1]+'/')[1];	
		
		project.setProperty('gerrit.user.name',username);
		project.setProperty('gerrit.host',hostArray[0]);
		project.setProperty('gerrit.port',hostArray[1]);
		project.setProperty('gerrit.project.name',projectname);		
	}	
  </script>
  
  <scriptdef name="get.patchset.infos" language="javascript">     
      <attribute name="patchset.json"/>  
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);
      importClass(java.io.FileWriter);
      importClass(java.io.BufferedWriter);
	  
	  var filePath = attributes.get('patchset.json');
      var file = new File(filePath);
      fr = new FileReader(file);
      br = new BufferedReader(fr);        
      // Read the file. 
      // This assumes the file has no line breaks and is one line.
      var json = br.readLine(); 	
      var strArray = json.split(' \\{');      	
      // Evaluate the JSON.
      var struct = eval("(" + strArray[0].toString() + ")");
      var array = new Array();
	  var revision;
	  var ref;
	  var projectName;
	  var branch;
      for (i in struct) {        
          if( i == 'currentPatchSet'){
		    revision = struct[i].revision;
			ref = struct[i].ref;
          	var fileArray = struct[i].files;            
          	for( j in fileArray){            	
          		if(fileArray[j].file != '/COMMIT_MSG'){
          			if((fileArray[j].type != 'DELETED')){            				
          				array.push(fileArray[j].file);
					}            			
          		}	          		
          	}
          }
		  if( i == 'project'){		     
		    projectName = struct[i];          	
          }
		  if( i == 'branch'){
		    branch = struct[i];          	
          }
		  
		 
      }
      // Set java files of junit.
      var testFileArray = new Array();
      for( i in array){      	
	      var srcSplit = array[i].split('src');
	      if(srcSplit[1] != null){
	      	var javaSplit = srcSplit[1].split('.');
		      if(javaSplit[1] == 'java' ){
	      		var lastNameTestCheck = javaSplit[0].substr(javaSplit[0].length - 4, 4);
	      		if(lastNameTestCheck == 'Test'){
	      			var addClassName = javaSplit[0].substring(1 , javaSplit[0].length)  + '.class'
	      			testFileArray.push(addClassName);	      			
	      		} else {
	      			var addTestClassName = javaSplit[0].substring(1 , javaSplit[0].length) + 'Test.class'
	      			testFileArray.push(addTestClassName);
	      		}		      
      		}		      
	      }      	
      }      
      project.setProperty('junit.test.file.list',testFileArray);
	  project.setProperty('gerrit.patchset.revision',revision);
	  project.setProperty('gerrit.refspec.number',ref);
	  project.setProperty('gerrit.project.name',projectName);
	  project.setProperty('gerrit.branch.name',branch);
	  
  </scriptdef>
  <scriptdef name="get.change.number.to.verified.patchset" language="javascript">     
      <attribute name="patch.verify.infos"/>
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);
      importClass(java.io.FileWriter);
      importClass(java.io.BufferedWriter);        
      var file = new File("patch.verify.infos");
      fr = new FileReader(file);
      br = new BufferedReader(fr);     
	  
	  var changeArray = new Array();
	  while(( line = br.readLine()) != null){        
		var strArray = line.split(' \\{');
		var struct = eval("(" + strArray[0].toString() + ")");
		
		for(i in struct){
		  var array = new Array();
		  if( i == 'number'){
          	changeArray.push(struct[i]);	
          }
		}
      }  
      project.setProperty('change.number.list.to.verified.patchset',changeArray.reverse());
  </scriptdef> 
  
<!-- ===================================================================== 
     - define taskdef : antcontrib lib => if, for , foreeach 
     ===================================================================== -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />	
  
  <target name="test"  description="gerrit query to verified patchset (+1, -1) over ssh.">
	<echo> ${gerrit.user.name}:${gerrit.host}:${gerrit.port} || ${gerrit.project.name} :${verified.value}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="patch.verify.infos"
	  output="patch.verify.infos"
	  command="git clone ssh://jenkins.ide@172.21.111.140:29418/ide/test/common-eplugin"/>
  </target>	 
  
<!-- ===================================================================== 
     - This is macro about git commands.
     ===================================================================== -->  

<!-- ===================================================================== 
     - gerrit query to verified patchset (+1, -1) over ssh.
     ===================================================================== -->
  <target name="get.verified.patchset"  description="gerrit query to verified patchset (+1, -1) over ssh.">
	<echo> ${gerrit.host}:${gerrit.port}:${gerrit.user.name} :${user.home}/${gerrit.keyfile.path} :${gerrit.project.name} :${gerrit.verified.value}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="patch.verify.infos"
	  output="patch.verify.infos"
	  command="gerrit query --format=JSON status:open --current-patch-set --files label:Code-Review${gerrit.verified.value},user=${gerrit.user.name} project:${gerrit.project.name}"/>
  </target>	 
  
<!-- ===================================================================== 
     - gerrit query by change number over ssh.
     ===================================================================== -->
  <target name="get.patchset.by.change.number"  description="gerrit query by change number over ssh.">
    <echo> Gerrit Query info - ${gerrit.user.name}@${gerrit.host}:${gerrit.port} change:${gerrit.change.number}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"	  
	  output="patchset.json"
	  command="gerrit query --format=JSON status:open --current-patch-set --files change:${gerrit.change.number}"/>	
  </target>
  
<!-- ===================================================================== 
     - get change number list by verified patchset (+1, -1). 
     ===================================================================== -->
  <target name="get.change.number.list"  description="get change number list by verified patchset (+1, -1).">
    <antcall target="get.verified.patchset">          
	  <param name="gerrit.verified.value" value="${verified.value}" />
	  <param name="gerrit.project.name" value="${project.name}" />
	</antcall>
	<get.change.number.to.verified.patchset patch.verify.infos="patch.verify.infos" />
	<var name="gerrit.change.number.list" unset="true" />
	<var name="gerrit.change.number.list" value="${change.number.list.to.verified.patchset}" />	
	<echo> Gerrit Change Number List : ${gerrit.change.number.list}</echo>
  </target>

<!-- ===================================================================== 
     - get change number list by verified patchset (+1, -1). 
     ===================================================================== -->
  <target name="get.patchset.infos"  description="get change number list by verified patchset (+1, -1).">
    <antcall target="get.patchset.by.change.number">
		<param name="gerrit.change.number" value="${change.number}"/>
	</antcall>
	
	
	<get.patchset.infos patchset.json="patchset.json" />
	<var name="patchset.refs.info" unset="true" />
	<var name="patchset.refs.info" value="${gerrit.refspec.number}" />	
	<var name="patchset.junit.list.info" unset="true" />
	<var name="patchset.junit.list.info" value="${junit.test.file.list}" />	
	<var name="patchset.revision.info" unset="true" />
	<var name="patchset.revision.info" value="${gerrit.patchset.revision}" />	
	<var name="patchset.project.info" unset="true" />
	<var name="patchset.project.info" value="${gerrit.project.name}" />
	<var name="patchset.branch.info" unset="true" />
	<var name="patchset.branch.info" value="${gerrit.branch.name}" />
	
	
	<if>
	  <equals arg1="${patchset.refs.info}" arg2="undefined" />
      <then>	    
		<fail message="Verify Fail : Gerrit Get Patchset Info error - ${change.number}"  unless="false"/>
      </then>
	</if>
	
	<echo> Gerrit Patchset Info : ${patchset.refs.info} : ${patchset.revision.info} : ${patchset.junit.list.info} : ${patchset.project.info} : ${patchset.branch.info} </echo>
  </target>  

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="verify.to.result"  description="gerrit review to the result of build and test over ssh.">
    <echo> Gerrit Verify info: ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.review.type}:${gerrit.review.time}:${gerrit.refs.no}</echo>
	<echo> Gerrit Verify info: ${gerrit.patchset.revision}:${gerrit.verified.value}:${gerrit.review.message}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="review.infos"	  
	  command="gerrit review --verified ${gerrit.verified.value} ${gerrit.patchset.revision} --message '${gerrit.review.message}' "/>	
	  
	<antcall target="get.review.result.file" />
	
  </target> 

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="review.to.result"  description="gerrit review to the result of build and test over ssh.">
    <echo> Gerrit Verify info: ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.review.type}:${gerrit.review.time}:${gerrit.refs.no}</echo>
	<echo> Gerrit Verify info: ${gerrit.patchset.revision}:${gerrit.verified.value}:${gerrit.review.message}</echo>
    <sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="review.infos"	  
	  command="gerrit review --code-review ${gerrit.verified.value} ${gerrit.patchset.revision} --message '${gerrit.review.message}' "/>      
	
    <antcall target="get.review.result.file" />	
  </target>

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="get.review.result.file"  description="gerrit review to the result of build and test over ssh.">
    <tstamp> 
      <format property="TODAY" pattern="yyyy-MM-dd" locale="en"/>
	</tstamp>
	<echo> Gerrit Verify info: ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.review.type}:${gerrit.review.time}:${gerrit.refs.no}</echo>
	<echo> Gerrit Verify info: ${gerrit.patchset.revision}:${gerrit.verified.value}:${gerrit.review.message}:${TODAY}</echo>

    <if>
        <available file="TESTS-TestSuites-${TODAY}.xml" type="file"/>
        <then>
          <echo>test.xml exist</echo>         
        </then>
		<else>
		  <echo file="TESTS-TestSuites-${TODAY}.xml" append="true"><![CDATA[<testsuite>]]>
		  </echo>
		</else>
    </if>
	
	<if>
      <equals arg1="${gerrit.verified.value}" arg2="-1" />
      <then>		    
	    <echo file="TESTS-TestSuites-${TODAY}.xml" append="true"><![CDATA[<testcase classname="${verify.project.name}" name="${gerrit.branch.name}_${gerrit.refs.no}_${gerrit.review.type}" time="${gerrit.review.time}">
		     <error type="${gerrit.review.type}">${gerrit.review.message}</error>
		</testcase>]]>
		</echo>
      </then>
	  <else>
	    <echo file="TESTS-TestSuites-${TODAY}.xml" append="true"><![CDATA[<testcase classname="${verify.project.name}" name="${gerrit.branch.name}_${gerrit.refs.no}_${gerrit.review.type}" time="${gerrit.review.time}"></testcase>]]>
		</echo>
	  </else>
	</if>
	
	<copy tofile="${dir.review.result}/TESTS-TestSuites-${TODAY}.xml">
	  <fileset dir="." includes="TESTS-TestSuites-${TODAY}.xml" erroronmissingdir="false" />                
	</copy>
	
	<echo file="${dir.review.result}/TESTS-TestSuites-${TODAY}.xml" append="true"><![CDATA[</testsuite>]]></echo>
		
  </target>

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="get.patchset.version"  description="gerrit review to the result of build and test over ssh.">
    <echo> Gerrit Info - ${gerrit.host}:${gerrit.port}:${gerrit.user.name} :${user.home}/${gerrit.keyfile.path}</echo>
	<echo> Search Info - ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.search.message}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="patch.version.infos"
	  output="patch.version.infos"
	  command="gerrit query --format=JSON -- status:merged project:${gerrit.project.name} branch:${gerrit.branch.name} message:${gerrit.search.message}"/>   
  </target>

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="get.change.log"  description="gerrit review to the result of build and test over ssh.">
    <echo> Gerrit Info - ${gerrit.host}:${gerrit.port}:${gerrit.user.name} :${user.home}/${gerrit.keyfile.path}</echo>
	<echo> Search Info - ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.ago.time}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="patch.change.infos"
	  output="patch.change.infos"
	  command="gerrit query --format=JSON -- status:merged project:${gerrit.project.name} branch:${gerrit.branch.name} -age:${gerrit.ago.time}"/>   
  </target>
  
<!-- ===================================================================== 
     - get change number list by verified patchset (+1, -1). 
     ===================================================================== -->
  <target name="get.version.lastUpdate"  description="get change number list by verified patchset (+1, -1).">
    <antcall target="get.patchset.version">
	  <param name="gerrit.project.name" value="${project.name}"/>
	  <param name="gerrit.branch.name" value="${branch.name}"/>
	  <param name="gerrit.search.message" value="${version.no}"/>
	</antcall>
	
	<get.version.lastUpdate.info patchset.json="patch.version.infos" />		
	<var name="patchset.lastUpdate.info" value="${gerrit.lastUpdate.info}" />
	<var name="patchset.commit.message.title.info" value="${gerrit.commit.message.info}" />
	
	<if>
	  <equals arg1="${patchset.lastUpdate.info}" arg2="undefined" />
      <then>	    
		<fail message="Gerrit Get Patchset Version Info error - ${project.name} : ${version.no}"  unless="false"/>
      </then>
	</if>	
  </target>

<!-- ===================================================================== 
     - gerrit review to the result of build & test over ssh.
     ===================================================================== -->
  <target name="get.version.status.open"  description="gerrit review to the result of build and test over ssh.">
    <echo> Gerrit Info - ${gerrit.host}:${gerrit.port}:${gerrit.user.name} :${user.home}/${gerrit.keyfile.path}</echo>
	<echo> Search Info - ${gerrit.project.name}:${gerrit.branch.name}:${gerrit.search.message}</echo>
	<sshexec host="${gerrit.host}"
	  port="${gerrit.port}"
	  username="${gerrit.user.name}"	  
	  keyfile="${user.home}/${gerrit.keyfile.path}"
	  outputproperty="patch.version.open.status"
	  output="patch.version.open.status"
	  command="gerrit query --format=JSON -- status:open project:${gerrit.project.name} branch:${gerrit.branch.name} message:${gerrit.search.message}"/>   
  </target>
  
<!-- ===================================================================== 
     - get change number list by verified patchset (+1, -1). 
     ===================================================================== -->
  <target name="check.version.status.open"  description="get change number list by verified patchset (+1, -1).">
    <antcall target="get.version.status.open">
	  <param name="gerrit.project.name" value="${project.name}"/>
	  <param name="gerrit.branch.name" value="${branch.name}"/>
	  <param name="gerrit.search.message" value="${version.no}"/>
	</antcall>
	
	<check.version.status.open.info patchset.json="patch.version.open.status" />		
	<var name="patchset.check.version.open.info" value="${gerrit.check.open.status}" />
		
	<if>
	  <equals arg1="${patchset.check.version.open.info}" arg2="true" />
      <then>	    
		<fail message="Package Version Up Error - The patch set of next version(${version.no}) already exists..."  unless="false"/>
      </then>
	</if>	
  </target>
  
<!-- ===================================================================== 
     - get change number list by verified patchset (+1, -1). 
     ===================================================================== -->
  <target name="get.change.log.data"  description="get change number list by verified patchset (+1, -1).">
    <antcall target="get.change.log">
	  <param name="gerrit.project.name" value="${project.name}"/>
	  <param name="gerrit.branch.name" value="${branch.name}"/>
	  <param name="gerrit.ago.time" value="${ago.time}m"/>
	</antcall>	
	
	<get.change.log.info patchset.json="patch.change.infos" last.commit.message="${last.commit.message}" />
	<var name="patchset.change.data.infos" value="${gerrit.change.log.arr}" />
	
  </target>
  
  <scriptdef name="check.version.status.open.info" language="javascript">     
      <attribute name="patchset.json"/>  
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);
      importClass(java.io.FileWriter);
      importClass(java.io.BufferedWriter);
	  
	  
	  var filePath = attributes.get('patchset.json');	
      var file = new File(filePath);
	  
      fr = new FileReader(file);
      br = new BufferedReader(fr);
    
	  
      var json = br.readLine(); 	
      var strArray = json.split(' \\{');
	 
      // Evaluate the JSON.
      var struct = eval("(" + strArray[0].toString() + ")");
      var ischeckversion = 'false';

      for (i in struct) {           
          if( i == 'subject'){		   
			ischeckversion = 'true';
          }		  
      }
	    
      project.setProperty('gerrit.check.open.status',ischeckversion);	 
  </scriptdef>
  <scriptdef name="get.version.lastUpdate.info" language="javascript">     
      <attribute name="patchset.json"/>  
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);
      importClass(java.io.FileWriter);
      importClass(java.io.BufferedWriter);
	  
	  
	  var filePath = attributes.get('patchset.json');	
      var file = new File(filePath);
	  
      fr = new FileReader(file);
      br = new BufferedReader(fr);        
      // Read the file. 
      // This assumes the file has no line breaks and is one line.
	  
      var json = br.readLine(); 	
      var strArray = json.split(' \\{');
	 
      // Evaluate the JSON.
      var struct = eval("(" + strArray[0].toString() + ")");
      var lastUpdateDate
	  var commitMsg;
      for (i in struct) {        
          if( i == 'lastUpdated'){		     
		    lastUpdateDate = struct[i];          	
          }	
          if( i == 'subject'){
		    var commitMsgArr = struct[i].split(':');			
			var testFileArray = new Array();	
			for(var i=0 ; i &lt; commitMsgArr.length ; i++){
			  var msg = commitMsgArr[i];
              if(msg.length > 0 ){
				testFileArray.push(msg);
              }			  
			}			
			commitMsg = testFileArray[testFileArray.length - 1];
          }		  
      }
	    
	  var arr = commitMsg.split('\n');	  
	  commitMsg = arr[0];	  
	  
      project.setProperty('gerrit.lastUpdate.info',lastUpdateDate);
	  project.setProperty('gerrit.commit.message.info',commitMsg);		  
  </scriptdef>
  <scriptdef name="get.change.log.info" language="javascript">     
      <attribute name="patchset.json"/>
	  <attribute name="last.commit.message"/>	  
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);
      importClass(java.io.FileWriter);
      importClass(java.io.BufferedWriter);	  
	  
	  var filePath = attributes.get('patchset.json');
	  var lastMsg = attributes.get('last.commit.message');	
      var file = new File(filePath);
	  var logArray = new Array();
	  var logString = "";
	  /*
	  var testMsg = attributes.get('test');
	  var testArr = testMsg.trim().split(':');	
	   echo = project.createTask("echo");
	          echo.setMessage("AAA testMsg: " + testMsg + "TEST AAA : " + testArr[testArr.length - 1] + "AAA : " + testArr.length);
	          echo.perform(); 
	*/
      fr = new FileReader(file);
      br = new BufferedReader(fr);        
      while(( line = br.readLine()) != null){     	
        var json = line; 	
        var strArray = json.split(' \\{');		
		var struct = eval("(" + strArray[0].toString() + ")");      
		var commitMsg;
		var isStopLoop = 'false';
		for (i in struct) {
		  if( i == 'subject'){
		   // if(struct[i].indexOf('[C]') != -1){
				var commitMsgArr = struct[i].split(':');			
				var testFileArray = new Array();	
				for(var i=0 ; i &lt; commitMsgArr.length ; i++){
				  var msg = commitMsgArr[i];
				  if(msg.length > 0 ){
					testFileArray.push(msg);
				  }			  
				}			
				commitMsg = testFileArray[testFileArray.length - 1];			 
				if(commitMsg.indexOf(lastMsg) != -1){
				  echo = project.createTask("echo");
				  echo.setMessage("Last Commit Msg: " + commitMsg);
				  echo.perform(); 
				  isStopLoop = 'true';			  
				  break;			  
				}
				
				logString += "@+"+commitMsg;
		 // }
		  }
		}
		if(isStopLoop == 'true'){
		  break;
		}
      }
	  project.setProperty('gerrit.change.log.arr',logString);
  </scriptdef>
  
</project>
